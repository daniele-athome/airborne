name: CI

# Controls when the action will run.
on:
  # Triggers the workflow on push or pull request events but only for the master branch
  push:
    branches: [ master, release ]
  pull_request:
    branches: [ master ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

env:
  flutter_version: '2.2.3'

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  windows:
    runs-on: windows-latest
    # TODO environment: ???

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Setup Flutter environment
        uses: subosito/flutter-action@v1
        with:
          flutter-version: ${{ env.flutter_version }}

      - name: Install dependencies
        run: |
          flutter pub get
          flutter config --enable-windows-desktop

      - name: Analyze code
        run: flutter analyze .

      - name: Run tests
        run: flutter test -r expanded

      - name: Build Windows application (debug)
        run: |
          flutter build windows --debug

      - name: Archive debug build
        uses: actions/upload-artifact@v2
        with:
          name: windows-bundle-debug
          path: |
            build/windows/runner/debug/

      - name: Build Windows application (release)
        run: |
          flutter build windows --release

      - name: Archive release build
        uses: actions/upload-artifact@v2
        with:
          name: windows-bundle-release
          path: |
            build/windows/runner/release/

  android:
    runs-on: ubuntu-latest
    # TODO environment: ???

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Install Java
        uses: actions/setup-java@v1
        with:
          java-version: '12.x'

      - name: Setup Flutter environment
        uses: subosito/flutter-action@v1
        with:
          flutter-version: ${{ env.flutter_version }}

      - name: Install dependencies
        run: flutter pub get

      - name: Analyze code
        run: flutter analyze .

      - name: Run tests
        run: flutter test -r expanded

      - name: Build Android application (debug)
        if: github.ref != 'refs/heads/release'
        run: flutter build appbundle --debug

      - name: Prepare for deploy
        if: github.ref == 'refs/heads/release'
        env:
          ENCRYPTED_FILE_KEY: ${{ secrets.ENCRYPTED_FILE_KEY }}
          ENCRYPTED_FILE_IV: ${{ secrets.ENCRYPTED_FILE_IV }}
        run: |
          cd android
          openssl aes-256-cbc -K $ENCRYPTED_FILE_KEY -iv $ENCRYPTED_FILE_IV -in fastlane/googleplay-developer-key.json.enc -out fastlane/googleplay-developer-key.json -d
          openssl aes-256-cbc -K $ENCRYPTED_FILE_KEY -iv $ENCRYPTED_FILE_IV -in fastlane/androidkey.jks.enc -out fastlane/androidkey.jks -d

      - name: Build Android application (release)
        if: github.ref == 'refs/heads/release'
        env:
          RELEASE_STORE_PASSWORD: ${{ secrets.ANDROID_KEYSTORE_PASSWORD }}
          RELEASE_KEY_ALIAS: ${{ secrets.ANDROID_KEY_ALIAS }}
          RELEASE_KEY_PASSWORD: ${{ secrets.ANDROID_KEY_PASSWORD }}
        run: flutter build appbundle --release

      - name: Setup Ruby environment
        if: github.ref == 'refs/heads/release'
        uses: actions/setup-ruby@v1
        with:
          ruby-version: '2.6'

      - name: Install Fastlane
        if: github.ref == 'refs/heads/release'
        run: gem install fastlane -N

      - name: Deploy to Google Play
        if: github.ref == 'refs/heads/release'
        run: |
          cd android
          fastlane deploy_beta

  ios:
    runs-on: macos-latest
    # TODO environment: ???

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Setup Flutter environment
        uses: subosito/flutter-action@v1
        with:
          flutter-version: ${{ env.flutter_version }}

      - name: Install dependencies
        run: flutter pub get

      - name: Analyze code
        run: flutter analyze .

      - name: Run tests
        run: flutter test -r expanded

      - name: Build iOS application
        run: flutter build ios --release --no-codesign

      - name: Prepare for deploy
        if: github.ref == 'refs/heads/release'
        env:
          APPSTORE_APIKEY: ${{ secrets.IOS_APPSTORE_APIKEY }}
        run: |
          cd ios
          echo "${APPSTORE_APIKEY}" | base64 -d >fastlane/AuthKey.p8

      - name: Setup Ruby environment
        if: github.ref == 'refs/heads/release'
        uses: actions/setup-ruby@v1
        with:
          ruby-version: '2.6'

      - name: Install Fastlane
        if: github.ref == 'refs/heads/release'
        run: gem install fastlane -N

      - name: Deploy to App Store
        if: github.ref == 'refs/heads/release'
        env:
          MATCH_APPSTORE_USERNAME: ${{ secrets.IOS_MATCH_APPSTORE_USERNAME }}
          MATCH_PASSWORD: ${{ secrets.IOS_MATCH_PASSWORD }}
          MATCH_GIT_AUTHORIZATION: ${{ secrets.IOS_MATCH_GIT_AUTHORIZATION }}
        run: |
          cd ios
          fastlane deploy_production
